library(synthpop)
library(dplyr)
df <- read.csv('../02_data/3__update_cleaned_sampled.csv')
#df <- read.csv('../02_data/2__update_cleaned.csv')
df <- df %>%
mutate(across(c(state,
voted,
Voters_Gender,
Parties_Description,
Residence_HHParties_Description,
EthnicGroups_EthnicGroup1Desc,
Ethnic_Description,
nonpartisan_donation,
CommercialData_PropertyType),
as.factor)) %>%
select(-Ethnic_Description)
# sds_ctree <- syn(df,
#                  method = "ctree", # specify method
#                  m = 2 # number of synthesis
#                  )
sds_cart <- syn(df,
method = "parametric",
polyreg.maxit = 3000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA)   )
compare(sds_cart, df, vars = "voted")
View(df)
names(df)
compare(sds_cart, df, vars = "Parties_Description")
compare(sds_cart, df)
compare(sds_cart, df, nrow = 3, ncol = 4, cols = mycols)$plot
compare(sds_cart, df, vars = "Parties_Description")
compare(sds_cart, df, vars = "Parties_Description") $plot
summary(sds_cart)
compare(sds_cart, df)
library(synthpop)
library(dplyr)
# df <- read.csv('../02_data/3__update_cleaned_sampled.csv')
df <- read.csv('../02_data/2__update_cleaned.csv')
df <- df %>%
mutate(across(c(state,
voted,
Voters_Gender,
Parties_Description,
Residence_HHParties_Description,
EthnicGroups_EthnicGroup1Desc,
Ethnic_Description,
nonpartisan_donation,
CommercialData_PropertyType),
as.factor)) %>%
select(-Ethnic_Description)
df <- read.csv('../02_data/3__update_cleaned_sampled.csv')
df <- df %>%
mutate(across(c(state,
voted,
Voters_Gender,
Parties_Description,
Residence_HHParties_Description,
EthnicGroups_EthnicGroup1Desc,
Ethnic_Description,
nonpartisan_donation,
CommercialData_PropertyType),
as.factor)) %>%
select(-Ethnic_Description)
start_time <- proc.time()
sds_parametric_k_prop_nrow <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.001),
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
df_sample_prop_0.001 <-  df %>% slice_sample(prop = 0.001)
start_time <- proc.time()
sds_parametric_k_prop_nrow <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.001),
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
end_time <- proc.time()
execution_time <- end_time - start_time
print(execution_time)
#df <- read.csv('../02_data/3__update_cleaned_sampled.csv')
df <- read.csv('../02_data/2__update_cleaned.csv')
df <- df %>%
mutate(across(c(state,
voted,
Voters_Gender,
Parties_Description,
Residence_HHParties_Description,
EthnicGroups_EthnicGroup1Desc,
Ethnic_Description,
nonpartisan_donation,
CommercialData_PropertyType),
as.factor)) %>%
select(-Ethnic_Description)
# random sampling
set.seed(123)
df_sample_prop_0.001 <-  df %>% slice_sample(prop = 0.001)
df_sample_prop_0.01 <-  df %>% slice_sample(prop = 0.01)
start_time <- proc.time()
sds_parametric_k_prop_nrow <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.001),
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
end_time <- proc.time()
execution_time <- end_time - start_time
print(execution_time)
start_time <- proc.time()
sds_parametric_k_upscaled_100 <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.001)*100,
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
end_time <- proc.time()
execution_time <- end_time - start_time
print(execution_time)
start_time <- proc.time()
sds_parametric_k_upscaled_1000 <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.001)*1000,
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
end_time <- proc.time()
execution_time <- end_time - start_time
print(execution_time)
start_time <- proc.time()
sds_parametric_k_4000 <- syn(df_sample_prop_0.01,
method = "parametric",
# visit.sequence = (1:ncol(sampled_df)),
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.01),
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
start_time <- proc.time()
sds_parametric_k_4000 <- syn(df_sample_prop_0.01,
method = "parametric",
# visit.sequence = (1:ncol(sampled_df)),
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.01),
# maxfaclevels = 85,
polyreg.maxit = 3000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
library(synthpop)
library(dplyr)
#df <- read.csv('../02_data/3__update_cleaned_sampled.csv')
df <- read.csv('../02_data/2__update_cleaned.csv')
df <- df %>%
mutate(across(c(state,
voted,
Voters_Gender,
Parties_Description,
Residence_HHParties_Description,
EthnicGroups_EthnicGroup1Desc,
Ethnic_Description,
nonpartisan_donation,
CommercialData_PropertyType),
as.factor)) %>%
select(-Ethnic_Description)
# random sampling
set.seed(123)
df_sample_prop_0.001 <-  df %>% slice_sample(prop = 0.001)
df_sample_prop_0.01 <-  df %>% slice_sample(prop = 0.01)
start_time <- proc.time()
sds_parametric_k_df_nrow <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = df_nrows,
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
df_nrows <- nrow(df)
start_time <- proc.time()
sds_parametric_k_df_nrow <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = df_nrows,
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
end_time <- proc.time()
execution_time <- end_time - start_time
print(execution_time)
start_time <- proc.time()
sds_parametric_k_4000 <- syn(df_sample_prop_0.001,
method = "parametric",
# visit.sequence = (1:ncol(sampled_df)),
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.01),
# maxfaclevels = 85,
polyreg.maxit = 3000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
library(synthpop)
library(dplyr)
#df <- read.csv('../02_data/3__update_cleaned_sampled.csv')
df <- read.csv('../02_data/2__update_cleaned.csv')
df <- df %>%
mutate(across(c(state,
voted,
Voters_Gender,
Parties_Description,
Residence_HHParties_Description,
EthnicGroups_EthnicGroup1Desc,
Ethnic_Description,
nonpartisan_donation,
CommercialData_PropertyType),
as.factor)) %>%
select(-Ethnic_Description)
df_nrows <- nrow(df)
# random sampling
set.seed(123)
df_sample_prop_0.001 <-  df %>% slice_sample(prop = 0.001)
df_sample_prop_0.01 <-  df %>% slice_sample(prop = 0.01)
nrow(df_sample_prop_0.01)
start_time <- proc.time()
sds_parametric_k_4000 <- syn(df_sample_prop_0.001,
method = "parametric",
# visit.sequence = (1:ncol(sampled_df)),
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.001),
# maxfaclevels = 85,
polyreg.maxit = 3000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
end_time <- proc.time()
execution_time <- end_time - start_time
print(execution_time)
# NOTE: this generates Error in solve.default(xtx + diag(pen)) : system is computationally singular: reciprocal condition number = 1.61179e-16
View(df_sample_prop_0.001)
start_time <- proc.time()
sds_parametric_k_4000 <- syn(df_sample_prop_0.01,
method = "parametric",
# visit.sequence = (1:ncol(sampled_df)),
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.01),
# maxfaclevels = 85,
polyreg.maxit = 3000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
View(df_sample_prop_0.01)
View(df_sample_prop_0.001)
library(synthpop)
library(dplyr)
#df <- read.csv('../02_data/3__update_cleaned_sampled.csv')
df <- read.csv('../02_data/2__update_cleaned.csv')
# df
# checking for multicollinearity
# library(caTools)
# library(car)
# library(quantmod)
# library(MASS)
# library(corrplot)
# num_cols <- sapply(df, is.numeric)
#
# df_num <- df[num_cols]
# df_num <- na.omit(df_num)
#
# var <- cor(df[num_cols])
# var
df <- df %>%
mutate(across(c(state,
voted,
Voters_Gender,
Parties_Description,
Residence_HHParties_Description,
EthnicGroups_EthnicGroup1Desc,
Ethnic_Description,
nonpartisan_donation,
CommercialData_PropertyType),
as.factor)) %>%
select(-Ethnic_Description)
df_nrows <- nrow(df)
# random sampling
set.seed(123)
df_sample_prop_0.001 <-  df %>% slice_sample(prop = 0.001)
df_sample_prop_0.01 <-  df %>% slice_sample(prop = 0.01)
start_time <- proc.time()
sds_parametric_k_prop_nrow <- syn(df_sample_prop_0.001,
method = "parametric",
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
k = nrow(df_sample_prop_0.001),
# maxfaclevels = 85,
polyreg.maxit = 1000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
start_time <- proc.time()
sds_parametric_k_4000 <- syn(df_sample_prop_0.01,
method = "parametric",
# visit.sequence = (1:ncol(sampled_df)),
visit.sequence = c(1,3,4,5,7,9,10,8,11,2,6),
m = 1,
#k = nrow(df_sample_prop_0.01),
# maxfaclevels = 85,
polyreg.maxit = 3000,
cont.na = list(calculated_age = NA,
CommercialData_EstimatedIncomeAmount = NA,
CommercialData_EstHomeValue = NA))
library(dplyr)
# This script subset tesing and training sets
# test
df <- read.csv('../02_data/2__update_cleaned.csv')
df <- df %>% mutate(row_index = row_number())
sample_df <- df %>% sample_n(100000, replace = FALSE)
testing_index <- sample_df$row_index
tbl <- df[!(df$row_index %in% testing_index), ]
View(tbl)
View(sample_df)
library(dplyr)
# This script subset tesing and training sets
# test
df <- read.csv('../02_data/2__update_cleaned.csv')
df <- df %>% mutate(row_index = row_number())
sample_df <- df %>% sample_n(100000, replace = FALSE)
testing1 <- sample_df[1:20000, ]
testing2 <- sample_df[20001:40000, ]
testing3 <- sample_df[40001:60000, ]
testing4 <- sample_df[60001:80000, ]
testing5 <- sample_df[80001:100000, ]
testing <- list(testing1,testing2, testing3, testing4, testing5)
output_dir <- "../02_data/testing/"
for (i in 1:length(testing)) {
file_name <- paste0(output_dir, "test_20k_", i, ".csv")
write.csv(testing[[i]], file_name, row.names = FALSE)
}
# training
testing_index <- sample_df$row_index
tbl <- df[!(df$row_index %in% testing_index), ]
sample_training <- tbl %>% sample_n(20000, replace = FALSE)
write.csv(sample_training, "../02_data/training/training_20k.csv",row.names = FALSE)
# check:
library(tidyverse)
setwd("/Users/liangsiyu/Dropbox/genai/02_data/testing")
tbl = list.files(
pattern = "\\.csv$") %>%
map_df(~read_csv(.))
train = read_csv("/Users/liangsiyu/Dropbox/genai/02_data/training/training_20k.csv")
train = train %>%
select(-...1)
View(train)
test = rbind(tbl,train)
length(unique(test$row_index))
tbl = list.files(
pattern = "\\.csv$") %>%
map_df(~read_csv(.))
train = read_csv("/Users/liangsiyu/Dropbox/genai/02_data/training/training_20k.csv")
test = rbind(tbl,train)
length(unique(test$row_index))
# check:
library(tidyverse)
tbl = list.files(
pattern = "\\.csv$") %>%
map_df(~read_csv(.))
train = read_csv("/Users/liangsiyu/Dropbox/genai/02_data/training/training_20k.csv")
test = rbind(tbl,train)
length(unique(test$row_index))
View(test)
